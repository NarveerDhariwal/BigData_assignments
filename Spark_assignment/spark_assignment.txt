4. Collect your data as a pyspark dataframe and perform different
operations.
Note: Consider only three files for creating a dataframe among all
case, region and TimeProvince

a. Read the data, show it and Count the number of records.

>>> df_case = spark.read.option("header",True).option("inferSchema",True).csv('file:///config/workspace/Case.csv')
>>> df_region= spark.read.option("header",True).option("inferSchema",True).csv('file:///config/workspace/Region.csv')
>>> df_time = spark.read.option("header",True).option("inferSchema",True).csv('file:///config/workspace/TimeProvince.csv')



>>> df_case.count()
174
>>> df_region.count()
244
>>> df_time.count()
2771


b. Describe the data with a describe function.

>>> df_case.describe()
DataFrame[summary: string, case_id: string, province: string, city: string, infection_case: string, confirmed: string, latitude: string, longitude: string]
>>> df_region.describe()
DataFrame[summary: string, code: string, province: string, city: string, latitude: string, longitude: string, elementary_school_count: string, kindergarten_count: string, university_count: string, academy_ratio: string, elderly_population_ratio: string, elderly_alone_ratio: string, nursing_home_count: string]
>>> df_time.describe()
DataFrame[summary: string, date: string, time: string, province: string, confirmed: string, released: string, deceased: string]
>>> 


c. If there is any duplicate value drop it.

>>> df_case.dropDuplicates().count()
174
>>> df_region.dropDuplicates().count()
244
>>> df_time.dropDuplicates().count()
2771

No duplicate values

d. Use limit function for showcasing a limited number of records.

>>> df_case.show(4)
+-------+--------+------------+-----+--------------------+---------+---------+----------+
|case_id|province|        city|group|      infection_case|confirmed| latitude| longitude|
+-------+--------+------------+-----+--------------------+---------+---------+----------+
|1000001|   Seoul|  Yongsan-gu| true|       Itaewon Clubs|      139|37.538621|126.992652|
|1000002|   Seoul|   Gwanak-gu| true|             Richway|      119| 37.48208|126.901384|
|1000003|   Seoul|     Guro-gu| true| Guro-gu Call Center|       95|37.508163|126.884387|
|1000004|   Seoul|Yangcheon-gu| true|Yangcheon Table T...|       43|37.546061|126.874209|
+-------+--------+------------+-----+--------------------+---------+---------+----------+
only showing top 4 rows

>>> df_region.show(4)
+-----+--------+-----------+---------+----------+-----------------------+------------------+----------------+-------------+------------------------+-------------------+------------------+
| code|province|       city| latitude| longitude|elementary_school_count|kindergarten_count|university_count|academy_ratio|elderly_population_ratio|elderly_alone_ratio|nursing_home_count|
+-----+--------+-----------+---------+----------+-----------------------+------------------+----------------+-------------+------------------------+-------------------+------------------+
|10000|   Seoul|      Seoul|37.566953|126.977977|                    607|               830|              48|         1.44|                   15.38|                5.8|             22739|
|10010|   Seoul| Gangnam-gu|37.518421|127.047222|                     33|                38|               0|         4.18|                   13.17|                4.3|              3088|
|10020|   Seoul|Gangdong-gu|37.530492|127.123837|                     27|                32|               0|         1.54|                   14.55|                5.4|              1023|
|10030|   Seoul| Gangbuk-gu|37.639938|127.025508|                     14|                21|               0|         0.67|                   19.49|                8.5|               628|
+-----+--------+-----------+---------+----------+-----------------------+------------------+----------------+-------------+------------------------+-------------------+------------------+
only showing top 4 rows

>>> df_time.show(4)
+----------+----+--------+---------+--------+--------+
|      date|time|province|confirmed|released|deceased|
+----------+----+--------+---------+--------+--------+
|2020-01-20|  16|   Seoul|        0|       0|       0|
|2020-01-20|  16|   Busan|        0|       0|       0|
|2020-01-20|  16|   Daegu|        0|       0|       0|
|2020-01-20|  16| Incheon|        1|       0|       0|
+----------+----+--------+---------+--------+--------+
only showing top 4 rows


e. If you find the column name is not suitable, change the column name.[optional]


>>> df_case.describe()
DataFrame[summary: string, case_id: string, province: string, city: string, infection_case: string, confirmed: string, latitude: string, longitude: string]

>>> df_case.withColumnRenamed('confirmed','confirmed_cases')
DataFrame[case_id: int, province: string, city: string, group: boolean, infection_case: string, confirmed_cases: int, latitude: string, longitude: string]


f. Select the subset of the columns.

>>> df_case.select(col('case_id').alias('new_case_id'), col('confirmed').alias('confirmed_cases')).show()
+-----------+---------------+
|new_case_id|confirmed_cases|
+-----------+---------------+
|    1000001|            139|
|    1000002|            119|
|    1000003|             95|
|    1000004|             43|
|    1000005|             43|


g. If there is any null value, fill it with any random value or drop it.

>>> df_case.na.replace('-',None).show()

>>> df_case = df_case.fillna('-')
>>> df_case.show()
+-------+--------+---------------+-----+--------------------+---------+---------+----------+
|case_id|province|           city|group|      infection_case|confirmed| latitude| longitude|
+-------+--------+---------------+-----+--------------------+---------+---------+----------+
|1000001|   Seoul|     Yongsan-gu| true|       Itaewon Clubs|      139|37.538621|126.992652|
|1000002|   Seoul|      Gwanak-gu| true|             Richway|      119| 37.48208|126.901384|
|1000003|   Seoul|        Guro-gu| true| Guro-gu Call Center|       95|37.508163|126.884387|
|1000004|   Seoul|   Yangcheon-gu| true|Yangcheon Table T...|       43|37.546061|126.874209|
|1000005|   Seoul|      Dobong-gu| true|     Day Care Center|       43|37.679422|127.044374|
|1000006|   Seoul|        Guro-gu| true|Manmin Central Ch...|       41|37.481059|126.894343|
|1000007|   Seoul|from other city| true|SMR Newly Planted...|       36|        -|         -|
|1000008|   Seoul|  Dongdaemun-gu| true|       Dongan Church|       17|37.592888|127.056766|
|1000009|   Seoul|from other city| true|Coupang Logistics...|       25|        -|         -|
|1000010|   Seoul|      Gwanak-gu| true|     Wangsung Church|       30|37.481735|126.930121|
|1000011|   Seoul|   Eunpyeong-gu| true|Eunpyeong St. Mar...|       14| 37.63369|  126.9165|
|1000012|   Seoul|   Seongdong-gu| true|    Seongdong-gu APT|       13| 37.55713|  127.0403|
|1000013|   Seoul|      Jongno-gu| true|Jongno Community ...|       10| 37.57681|   127.006|
|1000014|   Seoul|     Gangnam-gu| true|Samsung Medical C...|        7| 37.48825| 127.08559|
|1000015|   Seoul|        Jung-gu| true|Jung-gu Fashion C...|        7|37.562405|126.984377|
|1000016|   Seoul|   Seodaemun-gu| true|  Yeonana News Class|        5|37.558147|126.943799|
|1000017|   Seoul|      Jongno-gu| true|Korea Campus Crus...|        7|37.594782|126.968022|
|1000018|   Seoul|     Gangnam-gu| true|Gangnam Yeoksam-d...|        6|        -|         -|
|1000019|   Seoul|from other city| true|Daejeon door-to-d...|        1|        -|         -|
|1000020|   Seoul|   Geumcheon-gu| true|Geumcheon-gu rice...|        6|        -|         -|
+-------+--------+---------------+-----+--------------------+---------+---------+----------+
only showing top 20 rows

>>> df_case.filter(col('city').isNull()).count()
0
>>> 

h. Filter the data based on different columns or variables and do the best analysis.

>>> df_case.select('*').filter((col('province') == 'Daegu') & (col('confirmed') > 10)).show()
+-------+--------+------------+-----+--------------------+---------+---------+----------+
|case_id|province|        city|group|      infection_case|confirmed| latitude| longitude|
+-------+--------+------------+-----+--------------------+---------+---------+----------+
|1200001|   Daegu|      Nam-gu| true|  Shincheonji Church|     4511| 35.84008|  128.5667|
|1200002|   Daegu|Dalseong-gun| true|Second Mi-Ju Hosp...|      196|35.857375|128.466651|
|1200003|   Daegu|      Seo-gu| true|Hansarang Convale...|      124|35.885592|128.556649|
|1200004|   Daegu|Dalseong-gun| true|Daesil Convalesce...|      101|35.857393|128.466653|
|1200005|   Daegu|     Dong-gu| true|     Fatima Hospital|       39| 35.88395|128.624059|
|1200008|   Daegu|           -|false|     overseas inflow|       41|        -|         -|
|1200009|   Daegu|           -|false|contact with patient|      917|        -|         -|
|1200010|   Daegu|           -|false|                 etc|      747|        -|         -|
+-------+--------+------------+-----+--------------------+---------+---------+----------+

>>> df_case.select('infection_case').filter((col('province') == 'Daegu') & (col('confirmed') > 10)).show()
+--------------------+
|      infection_case|
+--------------------+
|  Shincheonji Church|
|Second Mi-Ju Hosp...|
|Hansarang Convale...|
|Daesil Convalesce...|
|     Fatima Hospital|
|     overseas inflow|
|contact with patient|
|                 etc|
+--------------------+


i. Sort the number of confirmed cases. Confirmed column is there in the dataset. Check with descending sort also.

>>> df_case.orderBy(col('confirmed').asc()).show()
+-------+-----------------+---------------+-----+--------------------+---------+---------+----------+
|case_id|         province|           city|group|      infection_case|confirmed| latitude| longitude|
+-------+-----------------+---------------+-----+--------------------+---------+---------+----------+
|7000002|          Jeju-do|              -|false|contact with patient|        0|        -|         -|
|3000007|       Gangwon-do|              -|false|contact with patient|        0|        -|         -|
|1000030|            Seoul|     Gangseo-gu| true|SJ Investment Cal...|        0|37.559649|126.835102|
|1100007|            Busan|from other city| true|Cheongdo Daenam H...|        1|        -|         -|
|5000003|     Jeollabuk-do|from other city| true|  Shincheonji Church|        1|        -|         -|
|1000028|            Seoul|from other city| true|Anyang Gunpo Past...|        1|        -|         -|
|1000025|            Seoul|     Gangnam-gu| true|Gangnam Dongin Ch...|        1|37.522331|127.057388|
|1700003|           Sejong|from other city| true|  Shincheonji Church|        1|        -|         -|
|5100002|     Jeollanam-do|from other city| true|  Shincheonji Church|        1|        -|         -|
|7000004|          Jeju-do|from other city| true|       Itaewon Clubs|        1|        -|         -|
|1000019|            Seoul|from other city| true|Daejeon door-to-d...|        1|        -|         -|
|1000034|            Seoul|              -| true|         Orange Life|        1|        -|         -|
|1700006|           Sejong|              -|false|                 etc|        1|        -|         -|
|1300005|          Gwangju|              -|false|                 etc|        1|        -|         -|
|1200006|            Daegu|from other city| true|       Itaewon Clubs|        2|        -|         -|
|1200007|            Daegu|from other city| true|Cheongdo Daenam H...|        2|        -|         -|
|1400004|          Incheon|from other city| true|  Shincheonji Church|        2|        -|         -|
|1000033|            Seoul|from other city| true|Uiwang Logistics ...|        2|        -|         -|
|1500006|          Daejeon|from other city| true|  Shincheonji Church|        2|        -|         -|
|4000003|Chungcheongbuk-do|from other city| true| Guro-gu Call Center|        2|        -|         -|
+-------+-----------------+---------------+-----+--------------------+---------+---------+----------+
only showing top 20 rows

>>> df_case.orderBy(col('confirmed').desc()).show()
+-------+-----------------+---------------+-----+--------------------+---------+---------+----------+
|case_id|         province|           city|group|      infection_case|confirmed| latitude| longitude|
+-------+-----------------+---------------+-----+--------------------+---------+---------+----------+
|1200001|            Daegu|         Nam-gu| true|  Shincheonji Church|     4511| 35.84008|  128.5667|
|1200009|            Daegu|              -|false|contact with patient|      917|        -|         -|
|1200010|            Daegu|              -|false|                 etc|      747|        -|         -|
|6000001| Gyeongsangbuk-do|from other city| true|  Shincheonji Church|      566|        -|         -|
|2000020|      Gyeonggi-do|              -|false|     overseas inflow|      305|        -|         -|
|1000036|            Seoul|              -|false|     overseas inflow|      298|        -|         -|
|1200002|            Daegu|   Dalseong-gun| true|Second Mi-Ju Hosp...|      196|35.857375|128.466651|
|6000012| Gyeongsangbuk-do|              -|false|contact with patient|      190|        -|         -|
|1000037|            Seoul|              -|false|contact with patient|      162|        -|         -|
|1000001|            Seoul|     Yongsan-gu| true|       Itaewon Clubs|      139|37.538621|126.992652|
|6000013| Gyeongsangbuk-do|              -|false|                 etc|      133|        -|         -|
|1200003|            Daegu|         Seo-gu| true|Hansarang Convale...|      124|35.885592|128.556649|
|1000002|            Seoul|      Gwanak-gu| true|             Richway|      119| 37.48208|126.901384|
|6000002| Gyeongsangbuk-do|   Cheongdo-gun| true|Cheongdo Daenam H...|      119| 35.64887|  128.7368|
|4100001|Chungcheongnam-do|     Cheonan-si| true|gym facility in C...|      103| 36.81503|  127.1139|
|1200004|            Daegu|   Dalseong-gun| true|Daesil Convalesce...|      101|35.857393|128.466653|
|1000038|            Seoul|              -|false|                 etc|      100|        -|         -|
|1000003|            Seoul|        Guro-gu| true| Guro-gu Call Center|       95|37.508163|126.884387|
|2000022|      Gyeonggi-do|              -|false|                 etc|       84|        -|         -|
|1400005|          Incheon|              -|false|     overseas inflow|       68|        -|         -|
+-------+-----------------+---------------+-----+--------------------+---------+---------+----------+
only showing top 20 rows


j. In case of any wrong data type, cast that data type from integer to string or string to integer.

>>> df_case = spark.read.option("header",True).option("inferSchema",True).csv('file:///config/workspace/Case.csv')
>>> df_case.printSchema()
root
 |-- case_id: integer (nullable = true)
 |-- province: string (nullable = true)
 |-- city: string (nullable = true)
 |-- group: boolean (nullable = true)
 |-- infection_case: string (nullable = true)
 |-- confirmed: integer (nullable = true)
 |-- latitude: string (nullable = true)
 |-- longitude: string (nullable = true)

>>> df_case = df_case.withColumn("latitude",col("latitude").cast("float")).withColumn("longitude",col("longitude").cast("float"))
>>> df_case.printSchema()
root
 |-- case_id: integer (nullable = true)
 |-- province: string (nullable = true)
 |-- city: string (nullable = true)
 |-- group: boolean (nullable = true)
 |-- infection_case: string (nullable = true)
 |-- confirmed: integer (nullable = true)
 |-- latitude: float (nullable = true)
 |-- longitude: float (nullable = true)



k. Use group by on top of province and city column and agg it with sum of confirmed cases. For example
df.groupBy(["province","city"]).agg(function.sum("confirmed")

>>> df_case.groupBy(["province","city"]).agg(sum("confirmed").alias("Total_confirmed_case")).orderBy(col("Total_confirmed_case")).show()
+----------------+---------------+--------------------+
|        province|           city|Total_confirmed_case|
+----------------+---------------+--------------------+
|           Seoul|     Gangseo-gu|                   0|
|    Jeollanam-do|from other city|                   1|
|         Jeju-do|from other city|                   1|
|          Sejong|from other city|                   1|
|    Jeollanam-do|       Muan-gun|                   2|
|           Seoul|Yeongdeungpo-gu|                   3|
|Gyeongsangnam-do|     Yangsan-si|                   3|
|      Gangwon-do|       Wonju-si|                   4|
|         Daejeon|from other city|                   4|
|           Daegu|from other city|                   4|
|           Busan|         Jin-gu|                   4|
|           Seoul|   Seodaemun-gu|                   5|
|         Gwangju|        Dong-gu|                   5|
|           Seoul|      Seocho-gu|                   5|
|           Busan|     Suyeong-gu|                   5|
|           Busan|    Haeundae-gu|                   6|
|           Seoul|   Geumcheon-gu|                   6|
|    Jeollabuk-do|from other city|                   6|
|Gyeongsangnam-do|Changnyeong-gun|                   7|
|Gyeongsangnam-do|    Changwon-si|                   7|
+----------------+---------------+--------------------+
only showing top 20 rows


l. For joins we will need one more file.you can use region file. User different different join methods.
for example cases.join(regions, ['province','city'],how='left')  You can do your best analysis

>>> df_case.join(df_region, ['province','city'] , how = 'inner').groupBy('province').agg(sum('confirmed')).show()
+-----------------+--------------+
|         province|sum(confirmed)|
+-----------------+--------------+
|           Sejong|            39|
|Chungcheongbuk-do|            11|
|       Gangwon-do|             4|
|          Gwangju|             5|
| Gyeongsangbuk-do|           332|
|            Daegu|          4971|
| Gyeongsangnam-do|            44|
|      Gyeonggi-do|           275|
|            Busan|            50|
|          Daejeon|            27|
|            Seoul|           637|
|Chungcheongnam-do|           112|
|     Jeollanam-do|             2|
+-----------------+--------------+

>>> df_case.join(df_region, ['province','city'] , how = 'left').groupBy('province').agg(sum('confirmed')).show()
+-----------------+--------------+
|         province|sum(confirmed)|
+-----------------+--------------+
|           Sejong|            49|
|            Ulsan|            51|
|Chungcheongbuk-do|            60|
|       Gangwon-do|            62|
|          Gwangju|            43|
| Gyeongsangbuk-do|          1324|
|            Daegu|          6680|
| Gyeongsangnam-do|           132|
|          Incheon|           202|
|          Jeju-do|            19|
|      Gyeonggi-do|          1000|
|            Busan|           156|
|          Daejeon|           131|
|            Seoul|          1280|
|Chungcheongnam-do|           158|
|     Jeollabuk-do|            23|
|     Jeollanam-do|            25|
+-----------------+--------------+

>>> df_case.join(df_region, ['province','city'] , how = 'right').groupBy('province').agg(sum('confirmed')).show()
+-----------------+--------------+
|         province|sum(confirmed)|
+-----------------+--------------+
|           Sejong|            39|
|            Ulsan|          null|
|Chungcheongbuk-do|            11|
|       Gangwon-do|             4|
|          Gwangju|             5|
| Gyeongsangbuk-do|           332|
|            Daegu|          4971|
| Gyeongsangnam-do|            44|
|          Incheon|          null|
|          Jeju-do|          null|
|      Gyeonggi-do|           275|
|            Busan|            50|
|          Daejeon|            27|
|            Seoul|           637|
|Chungcheongnam-do|           112|
|            Korea|          null|
|     Jeollabuk-do|          null|
|     Jeollanam-do|             2|
+-----------------+--------------+

>>> df_case.join(df_region, ['province','city'] , how = 'full').groupBy('province').agg(sum('confirmed')).show()
+-----------------+--------------+
|         province|sum(confirmed)|
+-----------------+--------------+
|           Sejong|            49|
|            Ulsan|            51|
|Chungcheongbuk-do|            60|
|       Gangwon-do|            62|
|          Gwangju|            43|
| Gyeongsangbuk-do|          1324|
|            Daegu|          6680|
| Gyeongsangnam-do|           132|
|          Incheon|           202|
|          Jeju-do|            19|
|      Gyeonggi-do|          1000|
|            Busan|           156|
|          Daejeon|           131|
|            Seoul|          1280|
|Chungcheongnam-do|           158|
|            Korea|          null|
|     Jeollabuk-do|            23|
|     Jeollanam-do|            25|
+-----------------+--------------+


5. If you want, you can also use SQL with data frames. Let us try to run some SQL on the cases table.

>>> df_case.registerTempTable('case_table')
>>> newDF = sqlContext.sql('select province, sum(confirmed) as total_cases from case_table group by province having total_cases>1000 order by total_cases')
>>> newDF.show()
+----------------+-----------+
|        province|total_cases|
+----------------+-----------+
|           Seoul|       1280|
|Gyeongsangbuk-do|       1324|
|           Daegu|       6680|
+----------------+-----------+

6. Create Spark UDFs
Create function casehighlow() If case is less than 50 return low else return high 
convert into a UDF Function and mention the return type of function.


>>> def casehighlow(value):
...     if value <50:
...             return 'Low'
...     else:
...             return 'High'
... 
>>> print(casehighlow(44))
Low
>>> print(casehighlow(444))
High
>>> casehighlowUDF = udf(lambda z: casehighlow(z), StringType())
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'udf' is not defined
>>> from pyspark.sql.functions import udf
>>> casehighlowUDF = udf(lambda z: casehighlow(z), StringType())
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'StringType' is not defined
>>> from pyspark.sql.types import IntegerType, StringType
>>> casehighlowUDF = udf(lambda z: casehighlow(z), StringType())
>>> df_case.select(col('case_id'), col('city'), col('infection_case'), col('confirmed'), casehighlowUDF('confirmed')).show()
+-------+---------------+--------------------+---------+-------------------+    
|case_id|           city|      infection_case|confirmed|<lambda>(confirmed)|
+-------+---------------+--------------------+---------+-------------------+
|1000001|     Yongsan-gu|       Itaewon Clubs|      139|               High|
|1000002|      Gwanak-gu|             Richway|      119|               High|
|1000003|        Guro-gu| Guro-gu Call Center|       95|               High|
|1000004|   Yangcheon-gu|Yangcheon Table T...|       43|                Low|
|1000005|      Dobong-gu|     Day Care Center|       43|                Low|
|1000006|        Guro-gu|Manmin Central Ch...|       41|                Low|
|1000007|from other city|SMR Newly Planted...|       36|                Low|
|1000008|  Dongdaemun-gu|       Dongan Church|       17|                Low|
|1000009|from other city|Coupang Logistics...|       25|                Low|
|1000010|      Gwanak-gu|     Wangsung Church|       30|                Low|
|1000011|   Eunpyeong-gu|Eunpyeong St. Mar...|       14|                Low|
|1000012|   Seongdong-gu|    Seongdong-gu APT|       13|                Low|
|1000013|      Jongno-gu|Jongno Community ...|       10|                Low|
|1000014|     Gangnam-gu|Samsung Medical C...|        7|                Low|
|1000015|        Jung-gu|Jung-gu Fashion C...|        7|                Low|
|1000016|   Seodaemun-gu|  Yeonana News Class|        5|                Low|
|1000017|      Jongno-gu|Korea Campus Crus...|        7|                Low|
|1000018|     Gangnam-gu|Gangnam Yeoksam-d...|        6|                Low|
|1000019|from other city|Daejeon door-to-d...|        1|                Low|
|1000020|   Geumcheon-gu|Geumcheon-gu rice...|        6|                Low|
+-------+---------------+--------------------+---------+-------------------+
only showing top 20 rows


>>> from pyspark.sql.types import IntegerType, StringType
>>> 
>>> from pyspark.sql.functions import udf
>>> @udf(returnType=StringType())
... def caselowhigh(input):
...     if input < 50:
...             return 'Low'
...     else:
...             return 'High'

>>> df_case.select(col('case_id'), col('city'), col('infection_case'), col('confirmed'), caselowhigh(col('confirmed')).alias('case-category')).show()
+-------+---------------+--------------------+---------+-------------+
|case_id|           city|      infection_case|confirmed|case-category|
+-------+---------------+--------------------+---------+-------------+
|1000001|     Yongsan-gu|       Itaewon Clubs|      139|         High|
|1000002|      Gwanak-gu|             Richway|      119|         High|
|1000003|        Guro-gu| Guro-gu Call Center|       95|         High|
|1000004|   Yangcheon-gu|Yangcheon Table T...|       43|          Low|
|1000005|      Dobong-gu|     Day Care Center|       43|          Low|
|1000006|        Guro-gu|Manmin Central Ch...|       41|          Low|
|1000007|from other city|SMR Newly Planted...|       36|          Low|
|1000008|  Dongdaemun-gu|       Dongan Church|       17|          Low|
|1000009|from other city|Coupang Logistics...|       25|          Low|
|1000010|      Gwanak-gu|     Wangsung Church|       30|          Low|
|1000011|   Eunpyeong-gu|Eunpyeong St. Mar...|       14|          Low|
|1000012|   Seongdong-gu|    Seongdong-gu APT|       13|          Low|
|1000013|      Jongno-gu|Jongno Community ...|       10|          Low|
|1000014|     Gangnam-gu|Samsung Medical C...|        7|          Low|
|1000015|        Jung-gu|Jung-gu Fashion C...|        7|          Low|
|1000016|   Seodaemun-gu|  Yeonana News Class|        5|          Low|
|1000017|      Jongno-gu|Korea Campus Crus...|        7|          Low|
|1000018|     Gangnam-gu|Gangnam Yeoksam-d...|        6|          Low|
|1000019|from other city|Daejeon door-to-d...|        1|          Low|
|1000020|   Geumcheon-gu|Geumcheon-gu rice...|        6|          Low|
+-------+---------------+--------------------+---------+-------------+
only showing top 20 rows
